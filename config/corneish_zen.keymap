#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NAV_L 1
#define OTH_L 2
#define NUM_L 3
#define SYM_L 4
#define MED_L 5
#define FUN_L 6

/ {
  chosen {
    //zmk,matrix_transform = &default_transform;
    zmk,matrix_transform = &five_column_transform;
  };
};

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        med_mo {
	    timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&mo MED_L>;
        };

        fn_mo {
	    timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&mo FUN_L>;
        };
	
        combo_cut {
            timeout-ms = <50>;
            key-positions = <21 23>;
            bindings = <&kp LC(X)>;
        };  
	
        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };  
	
        combo_paste {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&mt LS(LC(V)) LC(V)>;
        }; 
        combo_bs_left {
            timeout-ms = <50>;
            key-positions = <5 6>;
            layers = <0>;
            bindings = <&kp LC(BSPC)>;
        }; 
	
       combo_lpar {
            timeout-ms = <50>;
            key-positions = <12 13>;
            layers = <0>;
            bindings = <&kp LPAR>;
        };  
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <0>;
            bindings = <&kp RPAR>;
        };  
        combo_rbrac {
            timeout-ms = <50>;
            key-positions = <17 18>;
            layers = <0>;
            bindings = <&mt RBRC RBKT>;
        }; 
        combo_lbrac {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&mt LBRC LBKT>;
        };
        combo_lpar_veritcal {
            timeout-ms = <50>;
            key-positions = <3 13>;
            layers = <0>;
            bindings = <&kp LPAR>;
        };  
        combo_rpar_vertical {
            timeout-ms = <50>;
            key-positions = <6 16>;
            layers = <0>;
            bindings = <&kp RPAR>;
        };  
        combo_rbrac_vertical {
            timeout-ms = <50>;
            key-positions = <7 17>;
            layers = <0>;
            bindings = <&mt RBRC RBKT>;
        }; 
        combo_lbrac_vertical {
            timeout-ms = <50>;
            key-positions = <2 12>;
            layers = <0>;
            bindings = <&mt LBRC LBKT>;
        }; 
	
       combo_eq_vertical {
            timeout-ms = <50>;
            key-positions = <4 14>;
            layers = <0>;
            bindings = <&mt EQUAL PLUS>;
        };	
       combo_cap_word{
            timeout-ms = <50>;
            key-positions = <16 13>;
            layers = <0>;
            bindings = <&caps_word>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
                        label = "NUMBER";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                          	        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
                        label = "SYMBOL";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
